@incollection{coppoGentleIntroductionMultiparty2015,
  address = {Cham},
  title = {A {{Gentle Introduction}} to {{Multiparty Asynchronous Session Types}}},
  volume = {9104},
  isbn = {978-3-319-18940-6 978-3-319-18941-3},
  abstract = {This article provides a gentle introduction to multiparty session types, a class of behavioural types specifically targeted at describing protocols in distributed systems based on asynchronous communication. The type system ensures well-typed processes to enjoy non-trivial properties, including communication safety, protocol fidelity, as well as progress. The adoption of multiparty session types can positively affect the whole software lifecycle, from design to deployment, improving software reliability and reducing its development costs.},
  language = {en},
  booktitle = {Formal {{Methods}} for {{Multicore Programming}}},
  publisher = {{Springer International Publishing}},
  author = {Coppo, Mario and {Dezani-Ciancaglini}, Mariangiola and Padovani, Luca and Yoshida, Nobuko},
  editor = {Bernardo, Marco and Johnsen, Einar Broch},
  year = {2015},
  pages = {146-178},
  file = {/Users/r/Zotero/storage/PR6PURST/Coppo et al. - 2015 - A Gentle Introduction to Multiparty Asynchronous S.pdf},
  doi = {10.1007/978-3-319-18941-3_4}
}

@article{ngSafeMPICode,
  title = {Safe {{MPI Code Generation}} Based on {{Session Types}}},
  abstract = {This paper presents a code generation framework for type-safe and deadlock-free Message Passing Interface (MPI) programs. The code generation process starts with the definition of the global topology using a protocol specification language based on parameterised multiparty session types (MPST). An MPI parallel program backbone is automatically generated from the global specification. The backbone code can then be merged with the sequential code describing the application behaviour, resulting in a complete MPI program. This merging process is fully automated through the use of an aspect-oriented compilation approach. In this way, programmers only need to supply the intended communication protocol and provide sequential code to automatically obtain parallelised programs that are guaranteed free from communication mismatch, type errors or deadlocks. The code generation framework also integrates an optimisation method that overlaps communication and computation, and can derive not only representative parallel programs with common parallel patterns (such as ring and stencil), but also distributed applications from any MPST protocols. We show that our tool generates efficient and scalable MPI applications, and improves productivity of programmers. For instance, our benchmarks involving representative parallel and applicationspecific patterns speed up sequential execution by up to 31 times and reduce programming effort by an average of 39\%.},
  language = {en},
  author = {Ng, Nicholas and Coutinho, Jose G F and Yoshida, Nobuko},
  keywords = {read},
  pages = {22},
  file = {/Users/r/Zotero/storage/U7H9HDKV/Ng et al. - Safe MPI Code Generation based on Session Types.pdf}
}

@article{swierstraDataTypesCarte2008,
  title = {Data Types \`a La Carte},
  volume = {18},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S0956796808006758},
  abstract = {This paper describes a technique for assembling both data types and functions from isolated individual components. We also explore how the same technology can be used to combine free monads and, as a result, structure Haskell's monolithic IO monad.},
  language = {en},
  number = {04},
  journal = {Journal of Functional Programming},
  author = {Swierstra, Wouter},
  month = jul,
  year = {2008},
  file = {/Users/r/Zotero/storage/C9YP5MUL/Swierstra - 2008 - Data types Ã  la carte.pdf}
}


